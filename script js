// Funções gerais
document.addEventListener('DOMContentLoaded', function() {
    // Verifica se estamos na página de login ou home
    if (document.querySelector('.login-page')) {
        initLoginPage();
    } else if (document.querySelector('.home-page')) {
        initHomePage();
    }
});

// Página de Login
function initLoginPage() {
    const loginForm = document.getElementById('loginForm');
    const signUpLink = document.getElementById('signUp');
    const forgotPassword = document.getElementById('forgotPassword');
    
    // Login com email/senha
    loginForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        
        auth.signInWithEmailAndPassword(email, password)
            .then((userCredential) => {
                // Login bem-sucedido
                window.location.href = 'home.html';
            })
            .catch((error) => {
                alert('Erro ao fazer login: ' + error.message);
            });
    });
    
    // Redefinir senha
    forgotPassword.addEventListener('click', (e) => {
        e.preventDefault();
        const email = prompt('Digite seu email para redefinir a senha:');
        
        if (email) {
            auth.sendPasswordResetEmail(email)
                .then(() => {
                    alert('Email de redefinição enviado! Verifique sua caixa de entrada.');
                })
                .catch((error) => {
                    alert('Erro ao enviar email: ' + error.message);
                });
        }
    });
    
    // Criar nova conta
    signUpLink.addEventListener('click', (e) => {
        e.preventDefault();
        const email = prompt('Digite seu email para criar uma conta:');
        const password = prompt('Digite uma senha:');
        
        if (email && password) {
            auth.createUserWithEmailAndPassword(email, password)
                .then((userCredential) => {
                    alert('Conta criada com sucesso! Faça login.');
                })
                .catch((error) => {
                    alert('Erro ao criar conta: ' + error.message);
                });
        }
    });
}

// Página Home
function initHomePage() {
    // Sidebar
    const openSidebar = document.getElementById('openSidebar');
    const closeSidebar = document.getElementById('closeSidebar');
    const sidebar = document.getElementById('sidebar');
    const mainContent = document.querySelector('.main-content');
    
    openSidebar.addEventListener('click', () => {
        sidebar.style.left = '0';
        mainContent.classList.add('sidebar-open');
    });
    
    closeSidebar.addEventListener('click', () => {
        sidebar.style.left = '-250px';
        mainContent.classList.remove('sidebar-open');
    });
    
    // Navegação entre abas
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabPanes = document.querySelectorAll('.tab-pane');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            e.preventDefault();
            const tabId = button.getAttribute('data-tab');
            
            // Esconde todos os painéis
            tabPanes.forEach(pane => {
                pane.style.display = 'none';
            });
            
            // Mostra o painel selecionado
            document.getElementById(tabId).style.display = 'block';
            
            // Fecha o sidebar em dispositivos móveis
            if (window.innerWidth < 768) {
                sidebar.style.left = '-250px';
                mainContent.classList.remove('sidebar-open');
            }
            
            // Inicializa o jogo se for a aba de jogo
            if (tabId === 'jogo') {
                initGame();
            }
        });
    });
    
    // Botão Sair
    const logoutBtn = document.getElementById('logoutBtn');
    logoutBtn.addEventListener('click', () => {
        auth.signOut().then(() => {
            window.location.href = 'index.html';
        });
    });
    
    // Botão Sobre
    const aboutBtn = document.getElementById('aboutBtn');
    const aboutModal = document.getElementById('aboutModal');
    const closeModal = document.querySelector('.close-modal');
    
    aboutBtn.addEventListener('click', () => {
        aboutModal.style.display = 'flex';
    });
    
    closeModal.addEventListener('click', () => {
        aboutModal.style.display = 'none';
    });
    
    // Fechar modal ao clicar fora
    window.addEventListener('click', (e) => {
        if (e.target === aboutModal) {
            aboutModal.style.display = 'none';
        }
    });
    
    // Carrega informações do usuário
    auth.onAuthStateChanged(user => {
        if (user) {
            // Usuário logado
            document.getElementById('userName').textContent = user.email;
            
            // Carrega dados do usuário do Firestore
            db.collection('users').doc(user.uid).get()
                .then(doc => {
                    if (doc.exists) {
                        const userData = doc.data();
                        document.getElementById('coins').textContent = userData.coins || 0;
                        document.getElementById('level').textContent = userData.level || 1;
                        document.getElementById('xp').textContent = userData.xp || 0;
                        document.getElementById('shopCoins').textContent = userData.coins || 0;
                    } else {
                        // Cria um novo documento para o usuário
                        db.collection('users').doc(user.uid).set({
                            coins: 0,
                            level: 1,
                            xp: 0,
                            items: []
                        });
                    }
                });
        } else {
            // Usuário não logado, redireciona para login
            window.location.href = 'index.html';
        }
    });
    
    // Inicializa os botões de seleção
    document.querySelectorAll('.btn-select').forEach(btn => {
        btn.addEventListener('click', function() {
            alert('Funcionalidade em desenvolvimento!');
        });
    });
    
    // Inicializa os botões de compra
    document.querySelectorAll('.btn-buy').forEach(btn => {
        btn.addEventListener('click', function() {
            const item = this.parentElement;
            const price = parseInt(item.querySelector('p').textContent);
            const currentCoins = parseInt(document.getElementById('shopCoins').textContent);
            
            if (currentCoins >= price) {
                if (confirm(`Deseja comprar este item por ${price} moedas?`)) {
                    // Atualiza as moedas do usuário
                    const user = auth.currentUser;
                    const newCoins = currentCoins - price;
                    
                    db.collection('users').doc(user.uid).update({
                        coins: newCoins
                    }).then(() => {
                        document.getElementById('shopCoins').textContent = newCoins;
                        document.getElementById('coins').textContent = newCoins;
                        alert('Item comprado com sucesso!');
                        
                        // Adiciona o item ao inventário (simplificado)
                        const userItems = document.getElementById('userItems');
                        const itemName = item.querySelector('h3').textContent;
                        userItems.innerHTML = `<div class="user-item">
                            <img src="${item.querySelector('img').src}" alt="${itemName}">
                            <p>${itemName}</p>
                        </div>` + userItems.innerHTML;
                    });
                }
            } else {
                alert('Moedas insuficientes! Jogue mais para ganhar moedas.');
            }
        });
    });
}

// Jogo Flappy Bird simplificado
function initGame() {
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const startBtn = document.getElementById('startGame');
    const scoreDisplay = document.getElementById('gameScore');
    const levelDisplay = document.getElementById('gameLevel');
    const coinsDisplay = document.getElementById('gameCoins');
    
    // Variáveis do jogo
    let gameRunning = false;
    let score = 0;
    let level = 1;
    let coins = 0;
    let bird = {
        x: 50,
        y: canvas.height / 2,
        radius: 15,
        velocity: 0,
        gravity: 0.5,
        jump: -10
    };
    let pipes = [];
    let pipeWidth = 50;
    let pipeGap = 150;
    let pipeFrequency = 120;
    let frameCount = 0;
    let animationId;
    
    // Cores
    const colors = {
        bird: '#FFD700',
        pipe: '#8a2be2',
        background: '#000',
        sky: '#1a1a2e',
        text: '#FFF'
    };
    
    // Inicia o jogo
    function startGame() {
        if (gameRunning) return;
        
        gameRunning = true;
        score = 0;
        level = 1;
        coins = 0;
        bird.y = canvas.height / 2;
        bird.velocity = 0;
        pipes = [];
        frameCount = 0;
        
        scoreDisplay.textContent = score;
        levelDisplay.textContent = level;
        coinsDisplay.textContent = coins;
        
        startBtn.textContent = 'Jogando...';
        startBtn.disabled = true;
        
        // Inicia o loop do jogo
        gameLoop();
    }
    
    // Loop principal do jogo
    function gameLoop() {
        // Limpa o canvas
        ctx.fillStyle = colors.background;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Desenha o céu
        ctx.fillStyle = colors.sky;
        ctx.fillRect(0, 0, canvas.width, canvas.height / 2);
        
        // Atualiza e desenha o pássaro
        updateBird();
        drawBird();
        
        // Atualiza e desenha os canos
        updatePipes();
        drawPipes();
        
        // Verifica colisões
        if (checkCollisions()) {
            endGame();
            return;
        }
        
        // Incrementa a pontuação
        frameCount++;
        if (frameCount % 5 === 0) {
            score++;
            scoreDisplay.textContent = score;
            
            // Aumenta o nível a cada 100 pontos
            if (score > 0 && score % 100 === 0) {
                level++;
                levelDisplay.textContent = level;
                coins += 10; // Ganha moedas ao subir de nível
                coinsDisplay.textContent = coins;
            }
        }
        
        // Continua o loop
        animationId = requestAnimationFrame(gameLoop);
    }
    
    // Atualiza a posição do pássaro
    function updateBird() {
        bird.velocity += bird.gravity;
        bird.y += bird.velocity;
        
        // Limita o pássaro à tela
        if (bird.y < bird.radius) {
            bird.y = bird.radius;
            bird.velocity = 0;
        }
        
        if (bird.y > canvas.height - bird.radius) {
            bird.y = canvas.height - bird.radius;
            bird.velocity = 0;
        }
    }
    
    // Desenha o pássaro
    function drawBird() {
        ctx.fillStyle = colors.bird;
        ctx.beginPath();
        ctx.arc(bird.x, bird.y, bird.radius, 0, Math.PI * 2);
        ctx.fill();
        
        // Olho
        ctx.fillStyle = '#000';
        ctx.beginPath();
        ctx.arc(bird.x + 5, bird.y - 5, 3, 0, Math.PI * 2);
        ctx.fill();
        
        // Bico
        ctx.fillStyle = '#FFA500';
        ctx.beginPath();
        ctx.moveTo(bird.x + bird.radius, bird.y);
        ctx.lineTo(bird.x + bird.radius + 10, bird.y - 5);
        ctx.lineTo(bird.x + bird.radius + 10, bird.y + 5);
        ctx.closePath();
        ctx.fill();
    }
    
    // Atualiza os canos
    function updatePipes() {
        // Adiciona novos canos
        if (frameCount % pipeFrequency === 0) {
            const gapY = Math.random() * (canvas.height - pipeGap - 100) + 50;
            pipes.push({
                x: canvas.width,
                topHeight: gapY,
                bottomY: gapY + pipeGap,
                passed: false
            });
        }
        
        // Move os canos
        for (let i = pipes.length - 1; i >= 0; i--) {
            pipes[i].x -= 2 + level * 0.5; // Aumenta a velocidade com o nível
            
            // Remove canos que saíram da tela
            if (pipes[i].x < -pipeWidth) {
                pipes.splice(i, 1);
            }
            
            // Marca canos que o pássaro passou
            if (!pipes[i].passed && pipes[i].x < bird.x - pipeWidth / 2) {
                pipes[i].passed = true;
                score += 5; // Bônus por passar por um cano
                scoreDisplay.textContent = score;
                coins += 1; // Ganha moedas por passar por canos
                coinsDisplay.textContent = coins;
            }
        }
    }
    
    // Desenha os canos
    function drawPipes() {
        ctx.fillStyle = colors.pipe;
        
        for (let i = 0; i < pipes.length; i++) {
            // Cano de cima
            ctx.fillRect(pipes[i].x, 0, pipeWidth, pipes[i].topHeight);
            
            // Cano de baixo
            ctx.fillRect(pipes[i].x, pipes[i].bottomY, pipeWidth, canvas.height - pipes[i].bottomY);
            
            // Bordas arredondadas (simplificado)
            ctx.beginPath();
            ctx.arc(pipes[i].x + pipeWidth / 2, pipes[i].topHeight, pipeWidth / 2, 0, Math.PI);
            ctx.fill();
            
            ctx.beginPath();
            ctx.arc(pipes[i].x + pipeWidth / 2, pipes[i].bottomY, pipeWidth / 2, Math.PI, 0);
            ctx.fill();
        }
    }
    
    // Verifica colisões
    function checkCollisions() {
        // Colisão com o chão ou teto
        if (bird.y - bird.radius <= 0 || bird.y + bird.radius >= canvas.height) {
            return true;
        }
        
        // Colisão com os canos
        for (let i = 0; i < pipes.length; i++) {
            if (
                bird.x + bird.radius > pipes[i].x &&
                bird.x - bird.radius < pipes[i].x + pipeWidth &&
                (bird.y - bird.radius < pipes[i].topHeight ||
                 bird.y + bird.radius > pipes[i].bottomY)
            ) {
                return true;
            }
        }
        
        return false;
    }
    
    // Finaliza o jogo
    function endGame() {
        gameRunning = false;
        cancelAnimationFrame(animationId);
        
        // Exibe mensagem de fim de jogo
        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        ctx.fillStyle = colors.text;
        ctx.font = '30px Orbitron';
        ctx.textAlign = 'center';
        ctx.fillText('Fim de Jogo!', canvas.width / 2, canvas.height / 2 - 30);
        
        ctx.font = '20px Orbitron';
        ctx.fillText(`Pontuação: ${score}`, canvas.width / 2, canvas.height / 2 + 10);
        ctx.fillText(`Moedas ganhas: ${coins}`, canvas.width / 2, canvas.height / 2 + 40);
        
        // Atualiza as moedas do usuário no banco de dados
        const user = auth.currentUser;
        if (user && coins > 0) {
            db.collection('users').doc(user.uid).update({
                coins: firebase.firestore.FieldValue.increment(coins)
            }).then(() => {
                // Atualiza a exibição das moedas
                document.getElementById('coins').textContent = 
                    parseInt(document.getElementById('coins').textContent) + coins;
                document.getElementById('shopCoins').textContent = 
                    parseInt(document.getElementById('shopCoins').textContent) + coins;
            });
        }
        
        // Prepara para um novo jogo
        startBtn.textContent = 'Jogar Novamente';
        startBtn.disabled = false;
    }
    
    // Evento de pulo
    canvas.addEventListener('click', () => {
        if (gameRunning) {
            bird.velocity = bird.jump;
        }
    });
    
    // Evento de tecla espaço
    document.addEventListener('keydown', (e) => {
        if (e.code === 'Space' && gameRunning) {
            bird.velocity = bird.jump;
        }
    });
    
    // Botão de iniciar
    startBtn.addEventListener('click', startGame);
    
    // Desenha a tela inicial
    function drawStartScreen() {
        ctx.fillStyle = colors.background;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        ctx.fillStyle = colors.text;
        ctx.font = '30px Orbitron';
        ctx.textAlign = 'center';
        ctx.fillText('QuizzGame', canvas.width / 2, canvas.height / 2 - 30);
        
        ctx.font = '20px Orbitron';
        ctx.fillText('Clique para começar', canvas.width / 2, canvas.height / 2 + 20);
        
        // Desenha um pássaro na tela inicial
        ctx.fillStyle = colors.bird;
        ctx.beginPath();
        ctx.arc(canvas.width / 2, canvas.height / 2 - 80, 20, 0, Math.PI * 2);
        ctx.fill();
    }
    
    // Desenha a tela inicial
    drawStartScreen();
}
